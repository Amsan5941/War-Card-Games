'From Pharo10.0.0 of 5 December 2022 [Build information: Pharo-10.0.0+build.536.sha.2314c3f457171dcde477ff6575b578835f1fd519 (64 Bit)] on 6 March 2023 at 3:26:56.409 pm'!Object subclass: #War	instanceVariableNames: ''	classVariableNames: ''	package: 'WarGame'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!War class	instanceVariableNames: ''!!War class methodsFor: 'as yet unclassified' stamp: 'AmsanNaheswaran 3/4/2023 20:35'!comp: c1 comp: c2	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"					(c1 = c2)ifTrue: [ ^false ].	(c1 = 1)ifTrue: [ ^true ].	((c2 ~= 1) and: [(c1 > c2)]) ifTrue: [ ^true] ifFalse: [ ^false ].	! !!War class methodsFor: 'as yet unclassified' stamp: 'AmsanNaheswaran 3/5/2023 13:38'!deal: deck	"comment stating purpose of class-side method"	"scope: class-variables  &  class-instance-variables"					| player1 player2 warCards |		player1 := OrderedCollection new.	player2 := OrderedCollection new.			 1 to: 52 do: [:i | 		i even ifTrue: [ player1 addFirst: (deck at: i)]		ifFalse: [ player2 addFirst: (deck at: i)]	].	[ (player1 size > 0) and:  (player2 size > 0) ] whileTrue: [ 		| card1 card2 p1FaceDown p2FaceDown |	card1 := player1 removeFirst.	card2 := player2 removeFirst.		(War comp:card1 comp:card2) ifTrue: [ 				player1 addAll: ({card1. card2} sorted: [ :a :b | War comp: a comp: b ]).				] ifFalse: [ 			(War comp:card2 comp:card1) ifTrue:[ 			player2 addAll: ({card1. card2} sorted: [ :a :b | War comp: a comp: b]).			] ifFalse: [ 				warCards := OrderedCollection new.				warCards add: card1.				warCards add: card2.				[ card1 = card2 ] whileTrue: [   				((player1 size = 1) and: (warCards size = 50)) ifTrue: [ 					warCards add: (player1 removeFirst).					warCards := warCards sorted: [ :a :b | War comp: a comp: b  ].					player2 addAllLast: warCards.					 ^player2 asArray ].				((player2 size = 1) and: (warCards size = 50)) ifTrue: [ 					warCards  add: (player2 removeFirst).					warCards := warCards sorted: [ :a :b | War comp: a comp: b  ].					player1 addAllLast: warCards.					^player1 asArray  ].				((player1 isEmpty) and: (player2 size = 50)) ifTrue: [ 					player2  addAll: ({card1. card2} sorted: [ :a :b | War comp: a comp: b]).					^player2 asArray  ].				((player2 isEmpty) and: (player1 size = 50)) ifTrue: [					player1  addAll: ({card1. card2} sorted: [ :a :b | War comp: a comp: b]).					^player1 asArray  ].															p1FaceDown := player1 removeFirst.					p2FaceDown := player2 removeFirst.					card1 := player1 removeFirst.					card2 := player2 removeFirst.					warCards add: p1FaceDown.					warCards add: p2FaceDown.					warCards add: card1.					warCards add: card2.										(War comp: card1 comp: card2) ifTrue: [ 						warCards := warCards sorted: [:a :b | War comp: a comp: b ].						player1 addAllLast: warCards.						] ifFalse: [ 						(War comp: card2 comp: card1) ifTrue: [							warCards := warCards sorted: [ :a :b | War comp: a comp: b  ].							player2 addAllLast: warCards.							 ]						]					]				]			]		].			(player1 isEmpty) ifTrue: [ ^player2 asArray ] ifFalse: [ ^player1 asArray].							! !